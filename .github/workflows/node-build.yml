name: node-build
on:
  pull_request:
    branches:
#      - main
      - release/v1.1.0
    paths:
      - 'node-module/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    services: 
      redis:
        image: redis
        ports:
          -  6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: node Setup version 
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Generate Environment Variables File for Production
        run: |
          cd node-module
          mkdir env
          cd env
          echo "SECRET_KEY=$SECRET_KEY" >> .env
          echo "TOKEN_PREFIX=$TOKEN_PREFIX" >> .env
          echo "REFRESH_PREFIX=$REFRESH_PREFIX" >> .env
          echo "REDIS_HOST=$REDIS_HOST" >> .env
          echo "REDIS_PORT=$REDIS_PORT" >> .env
          echo "REDIS_USERNAME=$REDIS_USERNAME" >> .env
          echo "REDIS_PASSWORD=$REDIS_PASSWORD " >> .env
          echo "MONGO_URL=$MONGO_URL " >> .env
          echo "MONGO_USER=$MONGO_USER" >> .env
          echo "MONGO_PASS=$MONGO_PASS" >> .env
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TOKEN_PREFIX: ${{ secrets.TOKEN_PREFIX }}
          REFRESH_PREFIX: ${{ secrets.REFRESH_PREFIX }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASS: ${{ secrets.MONGO_PASS }}
      - name: Install Dependencies and Surge
        run: |
          cd node-module
          npm install
      # - name: Run Test
      #   run: |
      #     cd node-module
      #     npm run test
      - name: Build Docker image
        run: |
          cd node-module
          ls
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest \
            --build-arg SECRET_KEY=$SECRET_KEY \
            --build-arg TOKEN_PREFIX=$TOKEN_PREFIX \
            --build-arg REFRESH_PREFIX=$REFRESH_PREFIX \
            --build-arg REDIS_HOST=$REDIS_HOST \
            --build-arg REDIS_PORT=$REDIS_PORT \
            --build-arg REDIS_USERNAME= $REDIS_USERNAME \
            --build-arg REDIS_PASSWORD=$REDIS_PASSWORD \
            --build-arg MONGO_URL=$MONGO_URL \
            --build-arg MONGO_USER=$MONGO_USER \
            --build-arg MONGO_PASS=$MONGO_PASS \
            .
      - name: Push Docker image
        run: |
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest
      - name: get GitHub IP 
        id: ip
        uses: haythem/public-ip@v1.2
      # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Add github ip to AWS (7)
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행 (8)
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }} 
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker rm -f $(sudo docker ps -aq --filter ancestor=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest)
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest
            sudo docker run -it -d --name quiz-node --network redis-bridge --link quizstudio-mongodb -p 3000:3000 \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e TOKEN_PREFIX=${{ secrets.TOKEN_PREFIX }} \
            -e REFRESH_PREFIX=${{ secrets.REFRESH_PREFIX }} \
            -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
            -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
            -e REDIS_USERNAME=${{ secrets.REDIS_USERNAME }} \
            -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            -e MONGO_URL=${{ secrets.MONGO_URL }} \
            -e MONGO_USER=${{ secrets.MONGO_USER }} \
            -e MONGO_PASS=${{ secrets.MONGO_PASS }} \                        
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_NODE_IMAGE_NAME }}:latest
    


      # REMOVE Github IP FROM security group (9)
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32