name: quiz-batch-module

on:
  push:
    branches: 
      - main
    paths:
      - 'spring-module/quizstudio/quiz-batch/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      env_run: test
      jasypt_encryptor_password: ${{secrets.JASYPT_ENCRYPTOR_PASSWORD}}
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_DATABASE: jobseeckerstudio
      MYSQL_USER: ${{secrets.LOCAL_MYSQL_USER}}
      MYSQL_PASSWORD: ${{secrets.LOCAL_MYSQL_PASSWORD}}
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up MYSQL
        uses: samin/mysql-action@v1
        with:
          character set server: 'utf8'
          mysql database: 'jobseeckerstudio'
          mysql user: ${{secrets.LOCAL_MYSQL_USER}}
          mysql password: ${{secrets.LOCAL_MYSQL_PASSWORD}}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: QuizBatch Build with Maven 
        env:
          run_env: ${{ env.env_run }}
          jasypt_encryptor_password: ${{ env.jasypt_encryptor_password }}
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}
        run: |
          cd ../quiz-studio/spring-module/quizstudio/quiz-batch
          mvn clean package -DskipTests
      - name: Build Docker image
        run: |
          cd ../quiz-studio/spring-module/quizstudio/quiz-batch
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest \
            --build-arg JASYPT_ENCRYPTOR_PASSWORD=${{secrets.JASYPT_ENCRYPTOR_PASSWORD}} \
            --build-arg MYSQL_USER=${{secrets.MYSQL_USER}} \
            --build-arg MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}} \
            --build-arg MYSQL_HOST=${{secrets.MYSQL_HOST}} \
            --build-arg MYSQL_PORT=${{secrets.MYSQL_PORT}} \
            --build-arg MYSQL_DATABASE=${{secrets.MYSQL_DATABASE}} \
            --build-arg REDIS_HOST=${{secrets.REDIS_HOST}} \
            --build-arg REDIS_PORT=${{secrets.REDIS_PORT}} \
            .
      - name: Push Docker image
        run: |
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest
      - name: get GitHub IP 
        id: ip
        uses: haythem/public-ip@v1.2
      # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Add github ip to AWS (7)
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행 (8)
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }} 
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker rm -f $(sudo docker ps -aq --filter ancestor=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest)
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest
            sudo docker run -it -d --network {secrets.REDIS_HOST} -p 8080:8080 \
            -e JASYPT_ENCRYPTOR_PASSWORD=${{secrets.JASYPT_ENCRYPTOR_PASSWORD}} \
            -e MYSQL_USER=${{secrets.MYSQL_USER}} \
            -e MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}} \
            -e MYSQL_HOST=${{secrets.MYSQL_HOST}} \
            -e MYSQL_PORT=${{secrets.MYSQL_PORT}} \
            -e MYSQL_DATABASE=${{secrets.MYSQL_DATABASE}} \
            -e REDIS_HOST=${{secrets.REDIS_HOST}} \
            -e REDIS_PORT=${{secrets.REDIS_PORT}} \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_QUIZ_BATCH_IMAGE_NAME }}:latest

      # REMOVE Github IP FROM security group (9)
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

